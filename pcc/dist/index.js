#!/usr/bin/env node
import Ge from 'yargs';
import { hideBin } from 'yargs/helpers';
import { exit, chdir } from 'process';
import { exec } from 'child_process';
import { Octokit } from 'octokit';
import { existsSync, rmSync, mkdirSync, writeFileSync, readdirSync, renameSync, cpSync, readFileSync } from 'fs';
import b, { dirname, join } from 'path';
import me from 'os';
import f from 'chalk';
import F from 'ora';
import h, { HttpStatusCode } from 'axios';
import { ensureFile } from 'fs-extra';
import { Console } from 'console';
import { Transform } from 'stream';
import Te from 'dayjs';
import { OAuth2Client } from 'google-auth-library';
import Ie from 'http';
import je, { fileURLToPath } from 'url';
import Re from 'open';
import Me from 'server-destroy';
import W from 'nunjucks';

var m=class extends Error{constructor(){super("Pleaes login user using `pcc login` command"),this.name=this.constructor.name;}},C=class extends Error{constructor(){super("Not Found"),this.name=this.constructor.name;}};function a(t){return async function(e){try{await t(e);}catch(o){o instanceof m?(console.log(f.red("Error: User is not logged in.")),console.log(f.yellow('Please run "pcc login" to login the user.'))):(console.log(f.yellow(`
Stack trace:`,o.stack)),console.log(f.red("Error: Something went wrong. Please contact Pantheon support team.")),exit(1));}}}var P=class{constructor(e,o=!1){o?this.logger=null:this.logger=F(e);}start(){this.logger&&this.logger.start();}stop(){this.logger&&this.logger.stop();}succeed(e){this.logger&&this.logger.succeed(e);}},_=class{constructor(e=!1){this.logger=console,this.disabled=e;}log(...e){this.disabled||this.logger.log(...e);}error(...e){this.logger.error(...e);}};var l=b.join(me.tmpdir(),"react_sdk_90723"),D="sdk-repo.tar",ge={nextjs:"nextjs-starter",gatsby:"gatsby-starter"},ue={eslint:"^8.24.0","eslint-config-next":"^13.1.1"},fe={extends:"next/core-web-vitals"},he=new Octokit;async function A(t){return new Promise(function(e,o){exec(t,(s,p,g)=>{s?o(s):e({stdout:p,stderr:g});});})}var ye=async({dirName:t,template:e,skipInstallation:o,packageManager:s,silentLogs:p,eslint:g,appName:d})=>{let r=new _(p);t||(r.error(f.red("ERROR: Please enter valid directory name. Check pcc init --help for more details.")),exit(1)),existsSync(l)&&rmSync(l,{recursive:!0}),mkdirSync(l);let n=new P("Fetching starter kit...",p);n.start();let{data:i}=await he.request("GET /repos/{owner}/{repo}/tarball",{owner:"pantheon-systems",repo:"pantheon-content-cloud-sdk"});writeFileSync(b.join(l,D),Buffer.from(i)),await A(`tar xvpf ${b.join(l,D)} -C ${l}`);let v=readdirSync(l);v=v.filter(k=>k!==D),renameSync(b.join(l,v[0]),b.join(l,"pantheon-sdk")),n.succeed("Fetched starter kit!");let x=new P("Setting up project...",p);x.start(),existsSync(t)&&(x.stop(),r.error(f.red("ERROR: Project directory already exists.")),exit(1)),cpSync(b.join(l,"pantheon-sdk",ge[e]),t,{recursive:!0}),chdir(t);let w=JSON.parse(readFileSync("./package.json").toString());d?w.name=d:w.name=b.parse(t).base,g&&(w.devDependencies={...w.devDependencies,...ue},writeFileSync("./.eslintrc.json",JSON.stringify(fe,null,2))),writeFileSync("./package.json",JSON.stringify(w,null,2)+`
`),await A("git init"),await A("git add ."),await A('git commit -m "Initial commit from Pantheon Content Cloud Toolkit."'),x.succeed("Completed setting up project!");let T=e==="gatsby"?".env.development":".env.local";if(await A(`cp .env.example ${T}`),!o){let k=new P("Installing dependencies...",p);k.start(),await A(`${s} install`),k.succeed("Installed dependencies!");}process.chdir("../"),rmSync(l,{recursive:!0}),r.log(),r.log(f.green(`To get started please replace the placeholders in ${T}`)),r.log(f.green(`   cd ${t}`)),r.log(f.green("   vim .env.local")),r.log(f.green("And then run the website")),e==="nextjs"?r.log(f.green("   yarn dev")):r.log(f.green("   yarn start"));},B=a(ye);var J=b.join(me.homedir(),".pcc");var O=`${J}/auth.json`,u=async()=>{let t;try{t=JSON.parse(readFileSync(O).toString());}catch{return null}if(t.expiry_date&&t.expiry_date>Date.now())return t;try{let e=await c.refreshToken(t.refresh_token);return N(e),e}catch{return null}},N=async t=>{await new Promise((e,o)=>ensureFile(O,s=>{s?o(s):e();})),writeFileSync(O,JSON.stringify(t,null,2));};var Pe="staging",Ae={production:{addOnApiEndpoint:"https://us-central1-pantheon-content-cloud.cloudfunctions.net/addOnApi",googleClientId:"432998952749-6eurouamlt7mvacb6u4e913m3kg4774c.apps.googleusercontent.com",googleRedirectUri:"http://localhost:3030/oauth-redirect"},staging:{addOnApiEndpoint:"https://us-central1-pantheon-content-cloud-staging.cloudfunctions.net/addOnApi",googleClientId:"142470191541-8o14j77pvagisc66s48kl4ub91f9c7b8.apps.googleusercontent.com",googleRedirectUri:"http://localhost:3030/oauth-redirect"}},S=Ae[Pe];var $=`${S.addOnApiEndpoint}/api-key`,R=`${S.addOnApiEndpoint}/sites`,z=`${S.addOnApiEndpoint}/oauth`,M=class{static async getToken(e){return (await h.post(`${z}/token`,{code:e})).data}static async refreshToken(e){return (await h.post(`${z}/refresh`,{refreshToken:e})).data}static async createApiKey(){let e=await u();if(!e)throw new m;return (await h.post($,{},{headers:{Authorization:`Bearer ${e.id_token}`}})).data.apiKey}static async listApiKeys(){let e=await u();if(!e)throw new m;return (await h.get($,{headers:{Authorization:`Bearer ${e.id_token}`}})).data}static async revokeApiKey(e){let o=await u();if(!o)throw new m;try{await h.delete(`${$}/${e}`,{headers:{Authorization:`Bearer ${o.id_token}`}});}catch(s){if(s.response.status===HttpStatusCode.NotFound)throw new C}}static async createSite(e){let o=await u();if(!o)throw new m;return (await h.post(R,{name:"",url:e,emailList:""},{headers:{Authorization:`Bearer ${o.id_token}`}})).data.id}static async listSites(){let e=await u();if(!e)throw new m;return (await h.get(R,{headers:{Authorization:`Bearer ${e.id_token}`}})).data}static async updateSite(e,o){let s=await u();if(!s)throw new m;await h.patch(`${R}/${e}`,{url:o},{headers:{Authorization:`Bearer ${s.id_token}`}});}},c=M;function I(t){if(t.length===0)return;let e=Object.keys(t[0]).reduce((r,n)=>(r[n]=n.toString().length,r),{});t.forEach(r=>{Object.keys(e).forEach(n=>{r[n].toString().length>e[n]&&(e[n]=r[n].toString().length);});});let o=[];t.forEach(r=>{o.push(Object.keys(e).reduce((n,i)=>(n[i]=r[i].toString().padEnd(e[i]),n),{}));});let s=new Transform({transform(r,n,i){i(null,r);}});new Console({stdout:s}).table(o);let g=(s.read()||"").toString(),d="";for(let r of g.split(/[\r\n]+/)){let n=r.replace(/[^┬]*┬/,"\u250C");n=n.replace(/^├─*┼/,"\u251C"),n=n.replace(/│[^│]*/,""),n=n.replace(/^└─*┴/,"\u2514"),n=n.replace(/'/g," "),d+=`${n}
`;}console.log(d);}var q=a(async()=>{let t=F("Creating token...").start();try{let e=await c.createApiKey();t.succeed("Successfully created token for your user. "),console.log(`
Token:`,f.bold(f.green(e)),`
`),console.log(f.bold(f.yellow("Please note it down. It wont be accessible hereafter.")));}catch(e){throw t.fail(),e}}),G=a(async()=>{let t=F("Fetching list of existing tokens...").start();try{let e=await c.listApiKeys();if(t.succeed("Successfully fetched list of tokens."),e.length===0){console.log(f.yellow("No tokens found."));return}I(e.map(o=>({Id:o.id,Key:o.keyMasked,"Created At":Te(o.created).format("DD MMM YYYY, hh:mm A")})));}catch(e){throw t.fail(),e}}),V=a(async t=>{let e=F("Revoking token for given ID...").start();try{await c.revokeApiKey(t),e.succeed(`Successfully revoked token for ID "${f.bold(f.yellow(t))}"!`);}catch(o){throw e.fail(),o instanceof C&&(console.log(f.red("Token for given ID not found.")),exit(1)),o}});function L(t){return JSON.parse(Buffer.from(t.split(".")[1],"base64").toString())}W.configure({autoescape:!0});var Le=["https://www.googleapis.com/auth/userinfo.email"];function He(){return new Promise(async(t,e)=>{let o=F("Logging you in...").start();try{let s=await u();if(s){let r=L(s.id_token);o.succeed(`You are already logged in as ${r.email}.`);return}let g=new OAuth2Client({clientId:S.googleClientId,redirectUri:S.googleRedirectUri}).generateAuthUrl({access_type:"offline",scope:Le}),d=Ie.createServer(async(r,n)=>{try{if(r.url.indexOf("/oauth-redirect")>-1){let v=new je.URL(r.url,"http://localhost:3030").searchParams.get("code"),x=dirname(fileURLToPath(import.meta.url)),w=readFileSync(join(x,"../templates/loginSuccess.html")),T=await c.getToken(v),k=L(T.id_token);await N(T),n.end(W.renderString(w.toString(),{email:k.email})),d.destroy(),o.succeed(`You are successfully logged in as ${k.email}`),t();}}catch(i){o.fail(),e(i);}}).listen(3030,()=>{Re(g,{wait:!0}).then(r=>r.kill());});Me(d);}catch(s){throw o.fail(),s}})}var Q=a(He);var Je=async()=>{let t=F("Logging you out...").start();try{existsSync(O)&&rmSync(O),t.succeed("Successfully logged you out from PPC client!");}catch(e){throw t.fail(),e}},X=a(Je);var Z=a(async t=>{let e=F("Creating site...").start();try{await c.createSite(t),e.succeed("Successfully created the site with given details.");}catch(o){throw e.fail(),o}}),ee=a(async({id:t,url:e})=>{let o=F("Updating site...").start();try{await c.updateSite(t,e),o.succeed("Successfully updated the site for given ID.");}catch(s){throw o.fail(),s}}),te=a(async()=>{let t=F("Fetching list of existing sites...").start();try{let e=await c.listSites();if(t.succeed("Successfully fetched list of sites."),e.length===0){console.log(f.yellow("No sites found."));return}I(e.map(o=>({Id:o.id,Url:o.url,"Created At":o.created?Te(o.created).format("DD MMM YYYY, hh:mm A"):"NA"})));}catch(e){throw t.fail(),e}});Ge(hideBin(process.argv)).scriptName("pcc").usage("$0 <cmd>").strictCommands().demandCommand().command("init <project_directory> [options]","Sets up project with required files.",t=>{t.positional("<project_directory>",{describe:"The project directory in which setup should be done.",demandOption:!0,type:"string"}).option("template",{describe:"Template from which files should be copied.",type:"string",choices:["nextjs","gatsby"],demandOption:!0}).option("appName",{describe:'"package.json" compatible name for the project.',type:"string",demandOption:!1}).option("noInstall",{describe:"Do not install any dependencies.",type:"boolean",default:!1,demandOption:!1}).option("use-npm",{describe:"Use NPM package manager for installing dependencies.",type:"boolean",default:!1,demandOption:!1}).option("use-pnpm",{describe:"Use PNPM package manager for installing dependencies.",type:"boolean",default:!1,demandOption:!1}).option("use-yarn",{describe:"Use Yarn package manager for installing dependencies.",type:"boolean",default:!0,demandOption:!1}).option("silent",{describe:"Skips all console output except for errors and return value from actions.",type:"boolean",default:!1,demandOption:!1}).option("eslint",{describe:"Initialize with eslint config.",type:"boolean",default:!1,demandOption:!1});},async t=>{let e=t.project_directory,o=t.template,s=t.noInstall,p=t["use-npm"],g=t["use-pnpm"],d=t.appName,r=t.silent,n=t.eslint,i;p?i="npm":g?i="pnpm":i="yarn",await B({dirName:e,template:o,skipInstallation:s,packageManager:i,appName:d,silentLogs:r,eslint:n});}).command("token <cmd> [options]","Enables you to manage tokens for a PCC project.",t=>{t.strictCommands().demandCommand().command("create","Creates new token.",e=>{},async e=>await q()).command("list","Lists existing tokens.",e=>{},async e=>await G()).command("revoke <id>","Revokes token for a given id.",e=>{e.positional("<id>",{describe:"ID of the token which you want to revoke",demandOption:!0,type:"string"});},async e=>await V(e.id));},async t=>{}).command("site <cmd> [options]","Enables you to manage sites for a PCC project.",t=>{t.strictCommands().demandCommand().command("create [options]","Creates new site.",e=>{e.option("url",{describe:"Site url",type:"string",demandOption:!0});},async e=>await Z(e.url)).command("list","Lists existing sites.",e=>{},async e=>await te()).command("update <id> [options]","Updates site for a given ID.",e=>{e.positional("<id>",{describe:"ID of the site which you want to update",demandOption:!0,type:"string"}).option("url",{describe:"Site url",type:"string"});},async e=>await ee({id:e.id,url:e.url}));},async t=>{}).command("login","Logs you in you to PCC client.",t=>{},async t=>await Q()).command("logout","Logs you out you from PCC client.",t=>{},async t=>await X()).help(!0).argv;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,