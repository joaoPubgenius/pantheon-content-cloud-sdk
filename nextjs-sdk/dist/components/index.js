'use strict';

var reactMarkdown_js = require('react-markdown/lib/react-markdown.js');
var g = require('react');
var jsxRuntime = require('react/jsx-runtime');

function _interopNamespace(e) {
	if (e && e.__esModule) return e;
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n.default = e;
	return Object.freeze(n);
}

var g__namespace = /*#__PURE__*/_interopNamespace(g);

var A=Object.defineProperty;var R=Object.getOwnPropertySymbols;var N=Object.prototype.hasOwnProperty,O=Object.prototype.propertyIsEnumerable;var T=(t,e,n)=>e in t?A(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,p=(t,e)=>{for(var n in e||(e={}))N.call(e,n)&&T(t,n,e[n]);if(R)for(var n of R(e))O.call(e,n)&&T(t,n,e[n]);return t};var S=t=>{let e=(t==null?void 0:t.split("-"))||[];return e.length===1?e[0]:e[0]+e.slice(1).map(n=>n[0].toUpperCase()+n.slice(1)).join("")},k=t=>{let e={};return !t||t.length<1||t.forEach(n=>{let[r,a]=n.split(":");if(!(!r&&!a)){if(r&&a){let f=S(r.trim());e[f]=a.trim();return}switch(r){case"underline":e.textDecoration="underline";break;case"line-through":e.textDecoration="line-through";break;case"italic":e.fontStyle="italic";break;case"bold":e.fontWeight="bold";break;case"strike-through":e.textDecoration="line-through";break;case"superscript":e.verticalAlign="super";break;case"subscript":e.verticalAlign="sub";break;}}}),e};var v=/&(?:amp|lt|gt|quot|#39);/g,H=RegExp(v.source),L={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},U=t=>e=>t==null?void 0:t[e],M=U(L),C=t=>t&&H.test(t)?t.replace(v,M):t;var q=({element:t})=>{if(t.tag==="hr")return jsxRuntime.jsx("hr",{});let e=jsxRuntime.jsx(c,{x:t.children});return ["h1","h2","h3","h4","h5","h6"].includes(t.tag)?g__namespace.default.createElement(t.tag,p({},t.attrs),e):t.tag==="table"?jsxRuntime.jsx("table",{className:"text-black",children:jsxRuntime.jsx("tbody",{children:e})}):t.tag==="p"||t.tag==="span"?jsxRuntime.jsx("p",{children:e}):t.tag==="ul"&&t.children.length?jsxRuntime.jsx("ul",{children:e}):t.tag==="ol"&&t.children.length?jsxRuntime.jsx("ol",{children:e}):t.tag==="component"?jsxRuntime.jsx(c,{x:t}):null},u=q;var m=({x:t})=>{if(Array.isArray(t))return jsxRuntime.jsx(jsxRuntime.Fragment,{children:t.map((s,d)=>jsxRuntime.jsx(m,{x:s},d))});if(t==null)return null;let e=typeof t=="string"?t:t.data,n=k((t==null?void 0:t.style)||""),r=Boolean(n["vertical-align"]==="super"),a=Boolean(n["vertical-align"]==="sub");return ["li","tr","td"].includes(t.tag)?g__namespace.createElement(t.tag,p({style:n},t.attrs),g__namespace.createElement(m,{x:t.children})):e!=null?g__namespace.createElement(r?"sup":a?"sub":"span",{style:n},C(e)):t.tag==="span"&&t.data==null?jsxRuntime.jsx("span",{children:jsxRuntime.jsx(m,{x:t.children})}):t.tag==="p"?jsxRuntime.jsx(u,{element:t}):t.tag==="a"?jsxRuntime.jsx("a",{href:t.href,target:"_blank",rel:"noopener noreferrer",style:n,children:t.data}):t.tag==="img"||t.tag==="image"?jsxRuntime.jsx("img",{src:t.src,alt:t.alt,title:t.title}):t.type==="BLOCKQUOTE"?jsxRuntime.jsxs("blockquote",{children:[jsxRuntime.jsx("p",{dir:"ltr",children:"QUOTE TEXT"}),jsxRuntime.jsx("p",{dir:"ltr",children:"-\xA0QUOTE ATTRIBUTION"})]}):null},c=m;var I=({article:t,headerClassName:e,bodyClassName:n,containerClassName:r,renderTitle:a})=>{if((t==null?void 0:t.contentType)==="TEXT_MARKDOWN")return jsxRuntime.jsx("div",{className:r,children:t!=null&&t.content?jsxRuntime.jsx(reactMarkdown_js.ReactMarkdown,{children:String(t.content)}):jsxRuntime.jsx("span",{children:"No content to display"})});let s=t!=null&&t.content?JSON.parse(t.content):[],d=s.findIndex(h=>["h1","h2","h3","h4","h5","h6","h7","p"].includes(h.tag)),[y]=s.splice(d,1),b=y?jsxRuntime.jsx(c,{x:y.children}):jsxRuntime.jsx("span",{children:t==null?void 0:t.title});return jsxRuntime.jsxs("div",{className:r,children:[jsxRuntime.jsx("div",{className:e,children:a?a(b):b}),jsxRuntime.jsx("div",{className:n,children:s==null?void 0:s.map((h,E)=>jsxRuntime.jsx(u,{element:h,keyElem:E},E))})]})},Q=I;

exports.ArticleRenderer = Q;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,