'use strict';

var F = require('react');
var inMemoryCache_js = require('@apollo/client/cache/inmemory/inMemoryCache.js');
var ApolloClient_js = require('@apollo/client/core/ApolloClient.js');
var ApolloProvider_js = require('@apollo/client/react/context/ApolloProvider.js');
var useQuery_js = require('@apollo/client/react/hooks/useQuery.js');
var graphql = require('graphql');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var F__default = /*#__PURE__*/_interopDefault(F);

var M=Object.defineProperty,$=Object.defineProperties;var V=Object.getOwnPropertyDescriptors;var E=Object.getOwnPropertySymbols;var G=Object.prototype.hasOwnProperty,H=Object.prototype.propertyIsEnumerable;var O=(e,t,r)=>t in e?M(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))G.call(t,r)&&O(e,r,t[r]);if(E)for(var r of E(t))H.call(t,r)&&O(e,r,t[r]);return e},d=(e,t)=>$(e,V(t));var x=(e,t,r)=>new Promise((n,i)=>{var o=a=>{try{s(r.next(a));}catch(p){i(p);}},l=a=>{try{s(r.throw(a));}catch(p){i(p);}},s=a=>a.done?n(a.value):Promise.resolve(a.value).then(o,l);s((r=r.apply(e,t)).next());});var h=function(){return h=Object.assign||function(t){for(var r,n=1,i=arguments.length;n<i;n++){r=arguments[n];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o]);}return t},h.apply(this,arguments)};var g=new Map,_=new Map,L=!0,m=!1;function T(e){return e.replace(/[\s,]+/g," ").trim()}function k(e){return T(e.source.body.substring(e.start,e.end))}function K(e){var t=new Set,r=[];return e.definitions.forEach(function(n){if(n.kind==="FragmentDefinition"){var i=n.name.value,o=k(n.loc),l=_.get(i);l&&!l.has(o)?L&&console.warn("Warning: fragment with name "+i+` already exists.
graphql-tag enforces all fragment names across your application to be unique; read more about
this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names`):l||_.set(i,l=new Set),l.add(o),t.has(o)||(t.add(o),r.push(n));}else r.push(n);}),h(h({},e),{definitions:r})}function z(e){var t=new Set(e.definitions);t.forEach(function(n){n.loc&&delete n.loc,Object.keys(n).forEach(function(i){var o=n[i];o&&typeof o=="object"&&t.add(o);});});var r=e.loc;return r&&(delete r.startToken,delete r.endToken),e}function Y(e){var t=T(e);if(!g.has(t)){var r=graphql.parse(e,{experimentalFragmentVariables:m,allowLegacyFragmentVariables:m});if(!r||r.kind!=="Document")throw new Error("Not a valid GraphQL document.");g.set(t,z(K(r)));}return g.get(t)}function f(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];typeof e=="string"&&(e=[e]);var n=e[0];return t.forEach(function(i,o){i&&i.kind==="Document"?n+=i.loc.source.body:n+=i,n+=e[o+1];}),Y(n)}function J(){g.clear(),_.clear();}function X(){L=!1;}function B(){m=!0;}function Z(){m=!1;}var y={gql:f,resetCaches:J,disableFragmentWarnings:X,enableExperimentalFragmentVariables:B,disableExperimentalFragmentVariables:Z};(function(e){e.gql=y.gql,e.resetCaches=y.resetCaches,e.disableFragmentWarnings=y.disableFragmentWarnings,e.enableExperimentalFragmentVariables=y.enableExperimentalFragmentVariables,e.disableExperimentalFragmentVariables=y.disableExperimentalFragmentVariables;})(f||(f={}));f.default=f;var b=f;var W=F__default.default.createContext(null),ee=({client:e,children:t})=>jsxRuntime.jsx(W.Provider,{value:e,children:jsxRuntime.jsx(ApolloProvider_js.ApolloProvider,{client:e.apolloClient,children:t})}),D=()=>{let e=F__default.default.useContext(W);if(!e)throw new Error("Cannot use outside of a PantheonProvider");return e};var N=console,Q={error:()=>{},info:()=>{},warn:()=>{}};var C=class{constructor(t){if(this.host=t.pccHost,this.wsHost=t.pccWsHost||t.pccHost.replace(/^http/,"ws").replace(/^https/,"wss"),this.siteId=t.siteId,this.apiKey=t.apiKey,this.debug=t.debug||!1,this.logger=this.debug?N:Q,!this.host)throw new Error("Missing Pantheon Content Cloud host");if(!this.siteId)throw new Error("Missing Pantheon Content Cloud site ID");if(!this.apiKey)throw new Error("Missing Pantheon Content Cloud API Key");this.apolloClient=new ApolloClient_js.ApolloClient({uri:`${this.host}/sites/${this.siteId}/query`,cache:new inMemoryCache_js.InMemoryCache,headers:{"PCC-API-KEY":this.apiKey}}),this.debug&&this.logger.info("PantheonClient initialized with config",t);}};var P=b`
  query ListArticles(
    $contentType: ContentType
    $publishingLevel: PublishingLevel
  ) {
    articles(contentType: $contentType, publishingLevel: $publishingLevel) {
      id
      title
      source
      sourceURL
      keywords
      publishedDate
      publishingLevel
      contentType
    }
  }
`;function te(e,t){return x(this,null,function*(){return (yield e.apolloClient.query({query:P,variables:t})).data.articles})}var A=b`
  query GetArticle(
    $id: String!
    $contentType: ContentType
    $publishingLevel: PublishingLevel
  ) {
    article(
      id: $id
      contentType: $contentType
      publishingLevel: $publishingLevel
    ) {
      id
      title
      content
      source
      sourceURL
      keywords
      publishedDate
      publishingLevel
      contentType
    }
  }
`;function re(e,t,r){return x(this,null,function*(){return (yield e.apolloClient.query({query:A,variables:c({id:t},r)})).data.article})}var ne=(e,t)=>{var s;let{wsHost:r,logger:n}=D(),i=useQuery_js.useQuery(A,{variables:c({id:e},t)}),o=F.useRef(),l=F.useRef();return F.useEffect(()=>{l.current=e;},[e]),F.useEffect(()=>{if(o.current!=null)return;let a=new WebSocket(`${r}/ws`);o.current=a,a.addEventListener("open",()=>{n.info("Connected to the GraphQL backend."),a.send(JSON.stringify({Command:"subchanges",Id:e}));}),a.addEventListener("close",()=>{n.info("%cDisconnected and lonely","color: red;");}),a.addEventListener("message",p=>{let u=JSON.parse(p.data);switch(u.Command){case"refetch":{u.Id===l.current&&(n.info("%cNew content is available - refetching...","color: yellow;"),i.refetch());break}case"doc_gone":{u.Id===l.current&&n.error("Document has been deleted");break}case"debug":{n.info({json:u});break}default:n.error(`Unrecognized command ${u.Command}`,u);}});},[]),F.useEffect(()=>{var a;((a=o.current)==null?void 0:a.readyState)===WebSocket.OPEN&&o.current.send(JSON.stringify({Command:"subchanges",Id:e}));},[e]),F.useEffect(()=>{n.info("%cSuccessfully fetched updated content","color: lime;");},[i.data]),d(c({},i),{article:(s=i.data)==null?void 0:s.article})};var oe=e=>{var r;let t=useQuery_js.useQuery(P,{variables:e});return d(c({},t),{articles:(r=t.data)==null?void 0:r.articles})};var ie=(n=>(n.production="PRODUCTION",n.realtime="REALTIME",n.staging="STAGING",n))(ie||{}),ae=(r=>(r.TEXT_MARKDOWN="TEXT_MARKDOWN",r.TREE_PANTHEON="TREE_PANTHEON",r))(ae||{});

exports.ContentType = ae;
exports.PantheonClient = C;
exports.PantheonProvider = ee;
exports.PublishingLevel = ie;
exports.getArticle = re;
exports.getArticles = te;
exports.useArticle = ne;
exports.useArticles = oe;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,